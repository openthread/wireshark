# xnap.cnf
# xnap conformation file
# Copyright 2018 Pascal Quantin

#.OPT
PER
ALIGNED
#.END

#.OMIT_ASSIGNMENT
# Get rid of unused code warnings
#.END

#.MAKE_ENUM
GlobalNG-RANNode-ID TYPE_PREFIX
ProtocolIE-ID
ProcedureCode
TriggeringMessage

#.USE_VALS_EXT
ProcedureCode
ProtocolIE-ID

#.EXPORTS

#.PDU
XnAP-PDU

#.TYPE_RENAME
ProtocolIE-Field/value     ProtocolIE_Field_value
PrivateIE-Field/value      PrivateIE_Field_value
InitiatingMessage/value    InitiatingMessage_value
SuccessfulOutcome/value    SuccessfulOutcome_value
UnsuccessfulOutcome/value  UnsuccessfulOutcome_value

#.FIELD_RENAME
ProtocolExtensionField/id extension_id
PrivateIE-Field/id private_id
InitiatingMessage/value initiatingMessage_value

ProtocolIE-Field/value protocolIE_Field_value
SuccessfulOutcome/value successfulOutcome_value
PrivateIE-Field/value privateIE_Field_value

#.OMIT_ASSIGNMENT
DeliveryStatus
ListOfTAI
Presence
ProtocolIE-FieldPair
ProtocolIE-ContainerList
ProtocolIE-ContainerPair
ProtocolIE-ContainerPairList
RANAC-Item
ReferenceID
RLCMode
S-NG-RANnode-SecurityKey
SCGConfigurationQuery
TAI-Item
#.END

#.FN_BODY ProtocolIE-ID VAL_PTR = &xnap_data->protocol_ie_id
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
%(DEFAULT_BODY)s
#.FN_FTR ProtocolIE-ID
  if (tree) {
    proto_item_append_text(proto_item_get_parent_nth(actx->created_item, 2), ": %s", val_to_str_ext(xnap_data->protocol_ie_id, &xnap_ProtocolIE_ID_vals_ext, "unknown (%d)"));
  }
#.END

#.FN_PARS ProtocolIE-Field/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_ProtocolIEFieldValue

#.FN_PARS ProtocolExtensionField/extensionValue FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_ProtocolExtensionFieldExtensionValue

#.FN_BODY ProcedureCode VAL_PTR = &xnap_data->procedure_code
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
%(DEFAULT_BODY)s

#.FN_BODY TriggeringMessage VAL_PTR = &xnap_data->triggering_message
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
%(DEFAULT_BODY)s
#.END

#.FN_PARS InitiatingMessage/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_InitiatingMessageValue
#.FN_HDR InitiatingMessage/value
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
  xnap_data->message_type = INITIATING_MESSAGE;

#.FN_PARS SuccessfulOutcome/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_SuccessfulOutcomeValue
#.FN_HDR SuccessfulOutcome/value
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
  xnap_data->message_type = SUCCESSFUL_OUTCOME;

#.FN_PARS UnsuccessfulOutcome/value FN_VARIANT=_pdu_new TYPE_REF_FN=dissect_UnsuccessfulOutcomeValue
#.FN_HDR UnsuccessfulOutcome/value
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
  xnap_data->message_type = UNSUCCESSFUL_OUTCOME;

#.TYPE_ATTR
ProtocolExtensionID TYPE = FT_UINT8 DISPLAY = BASE_DEC|BASE_EXT_STRING STRINGS = &xnap_ProtocolIE_ID_vals_ext
#.END

#.FN_BODY GlobalNG-RANNode-ID VAL_PTR = &value
  gint value;
  struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);

%(DEFAULT_BODY)s
  if (xnap_data->xnap_conv && xnap_data->procedure_code == id_xnSetup) {
    if (addresses_equal(&actx->pinfo->src, &xnap_data->xnap_conv->addr_a)) {
      xnap_data->xnap_conv->ranmode_id_a = (GlobalNG_RANNode_ID_enum)value;
    } else if (addresses_equal(&actx->pinfo->src, &xnap_data->xnap_conv->addr_b)) {
      xnap_data->xnap_conv->ranmode_id_b = (GlobalNG_RANNode_ID_enum)value;
    }
  }

#.FN_BODY UEContextInfoHORequest/rrc-Context VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = (GlobalNG_RANNode_ID_enum)-1;

    if (xnap_data->xnap_conv) {
      if (addresses_equal(&actx->pinfo->dst, &xnap_data->xnap_conv->addr_a)) {
        target_ranmode_id = xnap_data->xnap_conv->ranmode_id_a;
      } else if (addresses_equal(&actx->pinfo->dst, &xnap_data->xnap_conv->addr_b)) {
        target_ranmode_id = xnap_data->xnap_conv->ranmode_id_b;
      }
    }
    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_RRC_Context);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY Target2SourceNG-RANnodeTranspContainer VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = (GlobalNG_RANNode_ID_enum)-1;

    if (xnap_data->xnap_conv) {
      if (addresses_equal(&actx->pinfo->dst, &xnap_data->xnap_conv->addr_a)) {
        target_ranmode_id = xnap_data->xnap_conv->ranmode_id_a;
      } else if (addresses_equal(&actx->pinfo->dst, &xnap_data->xnap_conv->addr_b)) {
        target_ranmode_id = xnap_data->xnap_conv->ranmode_id_b;
      }
    }
    subtree = proto_item_add_subtree(actx->created_item, ett_nxap_container);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) ||
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_HandoverCommand_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) ||
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_HandoverCommand_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY UEContextInfoRetrUECtxtResp/rrc-Context VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;

%(DEFAULT_BODY)s
  if (parameter_tvb) {
    struct xnap_private_data *xnap_data = xnap_get_private_data(actx->pinfo);
    proto_tree *subtree;
    GlobalNG_RANNode_ID_enum target_ranmode_id = (GlobalNG_RANNode_ID_enum)-1;

    if (xnap_data->xnap_conv) {
      if (addresses_equal(&actx->pinfo->dst, &xnap_data->xnap_conv->addr_a)) {
        target_ranmode_id = xnap_data->xnap_conv->ranmode_id_a;
      } else if (addresses_equal(&actx->pinfo->dst, &xnap_data->xnap_conv->addr_b)) {
        target_ranmode_id = xnap_data->xnap_conv->ranmode_id_b;
      }
    }
    subtree = proto_item_add_subtree(actx->created_item, ett_xnap_RRC_Context);
    if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
         target_ranmode_id == GlobalNG_RANNode_ID_gNB) &&
        (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_GNB)) {
      dissect_nr_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    } else if ((xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_AUTOMATIC &&
                target_ranmode_id == GlobalNG_RANNode_ID_ng_eNB) &&
               (xnap_dissect_target_ng_ran_container_as == XNAP_NG_RAN_CONTAINER_NG_ENB)) {
      dissect_lte_rrc_HandoverPreparationInformation_PDU(parameter_tvb, actx->pinfo, subtree, NULL);
    }
  }

#.FN_BODY PLMN-Identity  VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
  proto_tree *subtree;
%(DEFAULT_BODY)s
  if (!parameter_tvb)
    return offset;

  subtree = proto_item_add_subtree(actx->created_item, ett_xnap_PLMN_Identity);
  dissect_e212_mcc_mnc(parameter_tvb, actx->pinfo, subtree, 0, E212_NONE, FALSE);

#.TYPE_ATTR
TAC TYPE = FT_UINT24 DISPLAY = BASE_DEC_HEX
#.FN_BODY TAC VAL_PTR = &parameter_tvb HF_INDEX = -1
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    actx->created_item = proto_tree_add_item(tree, hf_index, parameter_tvb, 0, 3, ENC_BIG_ENDIAN);
  }

#.FIELD_ATTR
NG-RAN-Cell-Identity/nr ABBREV=NR-Cell-Identity TYPE=FT_UINT40 DISPLAY=BASE_HEX

#.FIELD_ATTR
NR-CGI/nr-CI ABBREV=NR-Cell-Identity TYPE=FT_UINT40 DISPLAY=BASE_HEX

#.FN_BODY NR-Cell-Identity VAL_PTR = &cell_id_tvb HF_INDEX=-1
  tvbuff_t *cell_id_tvb = NULL;
%(DEFAULT_BODY)s
  if (cell_id_tvb) {
    guint64 cell_id = tvb_get_bits64(cell_id_tvb, 0, 36, ENC_BIG_ENDIAN);
    actx->created_item = proto_tree_add_uint64(tree, hf_index, cell_id_tvb, 0, 5, cell_id);
  }

#.FIELD_ATTR
E-UTRA-CGI/e-utra-CI ABBREV=E-UTRA-Cell-Identity TYPE=FT_UINT32 DISPLAY=BASE_HEX

#.FIELD_ATTR
NG-RAN-Cell-Identity/e-utra ABBREV=E-UTRA-Cell-Identity TYPE=FT_UINT32 DISPLAY=BASE_HEX

#.FN_BODY E-UTRA-Cell-Identity VAL_PTR = &cell_id_tvb HF_INDEX=-1
  tvbuff_t *cell_id_tvb = NULL;
%(DEFAULT_BODY)s
  if (cell_id_tvb) {
    guint32 cell_id = tvb_get_bits32(cell_id_tvb, 0, 28, ENC_BIG_ENDIAN);
    actx->created_item = proto_tree_add_uint(tree, hf_index, cell_id_tvb, 0, 4, cell_id);
  }

#.FN_BODY ServedCellInformation-NR/measurementTimingConfiguration VAL_PTR = &param_tvb
  tvbuff_t *param_tvb = NULL;
%(DEFAULT_BODY)s
  if (param_tvb) {
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_measurementTimingConfiguration);
    dissect_nr_rrc_MeasurementTimingConfiguration_PDU(param_tvb, actx->pinfo, subtree, NULL);
  }

#.TYPE_ATTR
BitRate DISPLAY=BASE_DEC|BASE_UNIT_STRING STRINGS=&units_bit_sec

#.TYPE_ATTR
PacketLossRate DISPLAY = BASE_CUSTOM STRINGS = CF_FUNC(xnap_PacketLossRate_fmt)

#.FN_BODY TransportLayerAddress VAL_PTR = &parameter_tvb LEN_PTR = &len
  tvbuff_t *parameter_tvb = NULL;
  proto_tree *subtree;
  int len;

%(DEFAULT_BODY)s
  if (!parameter_tvb)
    return offset;

  subtree = proto_item_add_subtree(actx->created_item, ett_xnap_TransportLayerAddress);
  if (len == 32) {
    /* IPv4 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv4, parameter_tvb, 0, 4, ENC_BIG_ENDIAN);
  } else if (len == 128) {
    /* IPv6 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv6, parameter_tvb, 0, 16, ENC_NA);
  } else if (len == 160) {
    /* IPv4 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv4, parameter_tvb, 0, 4, ENC_BIG_ENDIAN);
    /* IPv6 */
     proto_tree_add_item(subtree, hf_xnap_transportLayerAddressIPv6, parameter_tvb, 4, 16, ENC_NA);
  }

#.FN_BODY UESecurityCapabilities/nr-EncyptionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_nr_EncyptionAlgorithms_nea1_128,
      &hf_xnap_T_nr_EncyptionAlgorithms_nea2_128,
      &hf_xnap_T_nr_EncyptionAlgorithms_nea3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_nr_EncyptionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY UESecurityCapabilities/nr-IntegrityProtectionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_nr_IntegrityProtectionAlgorithms_nia1_128,
      &hf_xnap_T_nr_IntegrityProtectionAlgorithms_nia2_128,
      &hf_xnap_T_nr_IntegrityProtectionAlgorithms_nia3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_nr_IntegrityProtectionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY UESecurityCapabilities/e-utra-EncyptionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_e_utra_EncyptionAlgorithms_eea1_128,
      &hf_xnap_T_e_utra_EncyptionAlgorithms_eea2_128,
      &hf_xnap_T_e_utra_EncyptionAlgorithms_eea3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_e_utra_EncyptionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY UESecurityCapabilities/e-utra-IntegrityProtectionAlgorithms VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_e_utra_IntegrityProtectionAlgorithms_eia1_128,
      &hf_xnap_T_e_utra_IntegrityProtectionAlgorithms_eia2_128,
      &hf_xnap_T_e_utra_IntegrityProtectionAlgorithms_eia3_128,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_e_utra_IntegrityProtectionAlgorithms);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 2, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY RAT-RestrictionInformation VAL_PTR=&parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_RAT_RestrictionInformation_e_UTRA,
      &hf_xnap_RAT_RestrictionInformation_nR,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_RAT_RestrictionInformation);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 1, fields, ENC_BIG_ENDIAN);
  }

#.FN_BODY TraceActivation/ng-ran-TraceID VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb;
  proto_tree *subtree = NULL;
%(DEFAULT_BODY)s
  if (!parameter_tvb)
    return offset;
  subtree = proto_item_add_subtree(actx->created_item, ett_xnap_ng_ran_TraceID);
  dissect_e212_mcc_mnc(parameter_tvb, actx->pinfo, subtree, 0, E212_NONE, FALSE);
  proto_tree_add_item(subtree, hf_xnap_ng_ran_TraceID_TraceID, parameter_tvb, 3, 3, ENC_BIG_ENDIAN);
  proto_tree_add_item(subtree, hf_xnap_ng_ran_TraceID_TraceRecordingSessionReference, parameter_tvb, 6, 2, ENC_BIG_ENDIAN);

#.FN_BODY TraceActivation/interfaces-to-trace VAL_PTR = &parameter_tvb
  tvbuff_t *parameter_tvb = NULL;
%(DEFAULT_BODY)s
  if (parameter_tvb) {
    const gint *fields[] = {
      &hf_xnap_T_interfaces_to_trace_ng_c,
      &hf_xnap_T_interfaces_to_trace_x_nc,
      &hf_xnap_T_interfaces_to_trace_uu,
      &hf_xnap_T_interfaces_to_trace_f1_c,
      &hf_xnap_T_interfaces_to_trace_e1,
      NULL
    };
    proto_tree *subtree = proto_item_add_subtree(actx->created_item, ett_xnap_interfaces_to_trace);
    proto_tree_add_bitmask_list(subtree, parameter_tvb, 0, 1, fields, ENC_BIG_ENDIAN);
  }

#.END

#.FN_HDR HandoverRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverRequest");
#.FN_HDR HandoverRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverRequestAcknowledge");
#.FN_HDR HandoverPreparationFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverPreparationFailure");
#.FN_HDR SNStatusTransfer
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNStatusTransfer");
#.FN_HDR HandoverCancel
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "HandoverCancel");
#.FN_HDR RetrieveUEContextRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RetrieveUEContextRequest");
#.FN_HDR RetrieveUEContextResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RetrieveUEContextResponse");
#.FN_HDR RetrieveUEContextFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RetrieveUEContextFailure");
#.FN_HDR RANPaging
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RANPaging");
#.FN_HDR DataForwardingAddressIndication
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "DataForwardingAddressIndication");
#.FN_HDR UEContextRelease
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "UEContextRelease");
#.FN_HDR SNodeAdditionRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeAdditionRequest");
#.FN_HDR SNodeAdditionRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeAdditionRequestAcknowledge");
#.FN_HDR SNodeAdditionRequestReject
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeAdditionRequestReject");
#.FN_HDR SNodeReconfigurationComplete
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReconfigurationComplete");
#.FN_HDR SNodeModificationRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequest");
#.FN_HDR SNodeModificationRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequestAcknowledge");
#.FN_HDR SNodeModificationRequestReject
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequestReject");
#.FN_HDR SNodeModificationRequired
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRequired");
#.FN_HDR SNodeModificationConfirm
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationConfirm");
#.FN_HDR SNodeModificationRefuse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeModificationRefuse");
#.FN_HDR SNodeReleaseRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseRequest");
#.FN_HDR SNodeReleaseRequestAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseRequestAcknowledge");
#.FN_HDR SNodeReleaseReject
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseReject");
#.FN_HDR SNodeReleaseRequired
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseRequired");
#.FN_HDR SNodeReleaseConfirm
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeReleaseConfirm");
#.FN_HDR SNodeCounterCheckRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeCounterCheckRequest");
#.FN_HDR SNodeChangeRequired
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeChangeRequired");
#.FN_HDR SNodeChangeConfirm
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeChangeConfirm");
#.FN_HDR SNodeChangeRefuse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "SNodeChangeRefuse");
#.FN_HDR RRCTransfer
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "RRCTransfer");
#.FN_HDR XnRemovalRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnRemovalRequest");
#.FN_HDR XnRemovalResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnRemovalResponse");
#.FN_HDR XnRemovalFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnRemovalFailure");
#.FN_HDR XnSetupRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnSetupRequest");
#.FN_HDR XnSetupResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnSetupResponse");
#.FN_HDR XnSetupFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "XnSetupFailure");
#.FN_HDR NGRANNodeConfigurationUpdate
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "NGRANNodeConfigurationUpdate");
#.FN_HDR NGRANNodeConfigurationUpdateAcknowledge
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "NGRANNodeConfigurationUpdateAcknowledge");
#.FN_HDR NGRANNodeConfigurationUpdateFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "NGRANNodeConfigurationUpdateFailure");
#.FN_HDR CellActivationRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "CellActivationRequest");
#.FN_HDR CellActivationResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "CellActivationResponse");
#.FN_HDR CellActivationFailure
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "CellActivationFailure");
#.FN_HDR ResetRequest
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "ResetRequest");
#.FN_HDR ResetResponse
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "ResetResponse");
#.FN_HDR ErrorIndication
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "ErrorIndication");
#.FN_HDR PrivateMessage
  col_append_sep_str(actx->pinfo->cinfo, COL_INFO, NULL, "PrivateMessage");

#.ASSIGN_VALUE_TO_TYPE  # XnAP does not have constants assigned to types, they are pure INTEGER
# ProcedureCode
id-handoverPreparation                                  ProcedureCode
id-sNStatusTransfer                                     ProcedureCode
id-handoverCancel                                       ProcedureCode
id-retrieveUEContext                                    ProcedureCode
id-rANPaging                                            ProcedureCode
id-dataForwardingAddressIndication                      ProcedureCode
id-uEContextRelease                                     ProcedureCode
id-sNGRANnodeAdditionPreparation                        ProcedureCode
id-sNGRANnodeReconfigurationCompletion                  ProcedureCode
id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation ProcedureCode
id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation ProcedureCode
id-mNGRANnodeinitiatedSNGRANnodeRelease                 ProcedureCode
id-sNGRANnodeinitiatedSNGRANnodeRelease                 ProcedureCode
id-sNGRANnodeCounterCheck                               ProcedureCode
id-sNGRANnodeChange                                     ProcedureCode
id-rRCTransfer                                          ProcedureCode
id-xnRemoval                                            ProcedureCode
id-xnSetup                                              ProcedureCode
id-nGRANnodeConfigurationUpdate                         ProcedureCode
id-cellActivation                                       ProcedureCode
id-reset                                                ProcedureCode
id-errorIndication                                      ProcedureCode
id-privateMessage                                       ProcedureCode

# ProtocolIE-ID
id-ActivatedServedCells                           ProtocolIE-ID
id-ActivationIDforCellActivation                  ProtocolIE-ID
id-AMF-Pool-Information                           ProtocolIE-ID
id-AreaOfInterest-Item                            ProtocolIE-ID
id-AssistanceDataForRANPaging                     ProtocolIE-ID
id-Cause                                          ProtocolIE-ID
id-cellAssistanceInfo-NR                          ProtocolIE-ID
id-ConfigurationUpdateInitiatingNodeChoice        ProtocolIE-ID
id-CriticalityDiagnostics                         ProtocolIE-ID
id-dataforwardingInfoperPDUSession                ProtocolIE-ID
id-dataforwardingInfoperPDUSession-Item           ProtocolIE-ID
id-DataForwardingResponseDRBItem                  ProtocolIE-ID
id-DRBsSubjectToStatusTransfer-Item               ProtocolIE-ID
id-DRBsSubjectToStatusTransfer-List               ProtocolIE-ID
id-DRBToQoSFlowMapping-Item                       ProtocolIE-ID
id-GlobalNG-RAN-node-ID                           ProtocolIE-ID
id-GUAMI                                          ProtocolIE-ID
id-List-of-served-cells-E-UTRA                    ProtocolIE-ID
id-List-of-served-cells-NR                        ProtocolIE-ID
id-LocationReportingInformation                   ProtocolIE-ID
id-MAC-I                                          ProtocolIE-ID
id-MaskedIMEISV                                   ProtocolIE-ID
id-new-NG-RAN-Cell-Identity                       ProtocolIE-ID
id-newNG-RANnodeUEXnAPID                          ProtocolIE-ID
id-oldNG-RANnodeUEXnAPID                          ProtocolIE-ID
id-PagingDRX                                      ProtocolIE-ID
id-PDUSessionResourceAdmittedResponseTransferItem ProtocolIE-ID
id-PDUSessionResourcesAdmitted-Item               ProtocolIE-ID
id-PDUSessionResourcesAdmitted-List               ProtocolIE-ID
id-PDUSessionResourcesNotAdmitted-Item            ProtocolIE-ID
id-PDUSessionResourcesNotAdmitted-List            ProtocolIE-ID
id-PDUSessionResourcesToBeSetup-Item              ProtocolIE-ID
id-QoSFlowAdmitted-Item                           ProtocolIE-ID
id-QoSFlow-Item                                   ProtocolIE-ID
id-QoSFlowNotAdmitted-Item                        ProtocolIE-ID
id-QoSFlowsToBeSetup-Item                         ProtocolIE-ID
id-RANPagingArea                                  ProtocolIE-ID
id-RANPagingPriority                              ProtocolIE-ID
id-ResetRequestPartialReleaseItem                 ProtocolIE-ID
id-ResetRequestTypeInfo                           ProtocolIE-ID
id-ResetResponsePartialReleaseItem                ProtocolIE-ID
id-ResetResponseTypeInfo                          ProtocolIE-ID
id-RespondingNodeTypeConfigUpdateAck              ProtocolIE-ID
id-ServedCellsToActivate                          ProtocolIE-ID
id-servedCellsToUpdate-E-UTRA                     ProtocolIE-ID
id-ServedCellsToUpdateInitiatingNodeChoice        ProtocolIE-ID
id-servedCellsToUpdate-NR                         ProtocolIE-ID
id-sourceNG-RANnodeUEXnAPID                       ProtocolIE-ID
id-TAISupport-Item                                ProtocolIE-ID
id-TAISupport-list                                ProtocolIE-ID
id-Target2SourceNG-RANnodeTranspContainer         ProtocolIE-ID
id-targetCellGlobalID                             ProtocolIE-ID
id-targetNG-RANnodeUEXnAPID                       ProtocolIE-ID
id-TraceActivation                                ProtocolIE-ID
id-UEContextID                                    ProtocolIE-ID
id-UEContextInfoHORequest                         ProtocolIE-ID
id-UEContextInfoRetrUECtxtResp                    ProtocolIE-ID
id-UEIdentityIndexValue                           ProtocolIE-ID
id-UERANPagingIdentity                            ProtocolIE-ID
id-XnRemovalThreshold                             ProtocolIE-ID

#.REGISTER

#XNAP-PROTOCOL-IES
ActivatedServedCells                              N xnap.ies id-ActivatedServedCells
ActivationIDforCellActivation                     N xnap.ies id-ActivationIDforCellActivation
AMF-Pool-Information                              N xnap.ies id-AMF-Pool-Information
AreaOfInterest-Item                               N xnap.ies id-AreaOfInterest-Item
AssistanceDataForRANPaging                        N xnap.ies id-AssistanceDataForRANPaging
Cause                                             N xnap.ies id-Cause
CellAssistanceInfo-NR                             N xnap.ies id-cellAssistanceInfo-NR
ConfigurationUpdateInitiatingNodeChoice           N xnap.ies id-ConfigurationUpdateInitiatingNodeChoice
CriticalityDiagnostics                            N xnap.ies id-CriticalityDiagnostics
DataforwardingInfoperPDUSession                   N xnap.ies id-dataforwardingInfoperPDUSession
DataforwardingInfoperPDUSession-Item              N xnap.ies id-dataforwardingInfoperPDUSession-Item
DataForwardingResponseDRBItem                     N xnap.ies id-DataForwardingResponseDRBItem
DRBsSubjectToStatusTransfer-Item                  N xnap.ies id-DRBsSubjectToStatusTransfer-Item
DRBsSubjectToStatusTransfer-List                  N xnap.ies id-DRBsSubjectToStatusTransfer-List
DRBToQoSFlowMapping-Item                          N xnap.ies id-DRBToQoSFlowMapping-Item
GlobalNG-RANNode-ID                               N xnap.ies id-GlobalNG-RAN-node-ID
GUAMI                                             N xnap.ies id-GUAMI
ServedCells-E-UTRA                                N xnap.ies id-List-of-served-cells-E-UTRA
ServedCells-NR                                    N xnap.ies id-List-of-served-cells-NR
LocationReportingInformation                      N xnap.ies id-LocationReportingInformation
MAC-I                                             N xnap.ies id-MAC-I
MaskedIMEISV                                      N xnap.ies id-MaskedIMEISV
NG-RAN-Cell-Identity                              N xnap.ies id-new-NG-RAN-Cell-Identity
NG-RANnodeUEXnAPID                                N xnap.ies id-newNG-RANnodeUEXnAPID
NG-RANnodeUEXnAPID                                N xnap.ies id-oldNG-RANnodeUEXnAPID
PagingDRX                                         N xnap.ies id-PagingDRX
#id-PDUSessionResourceAdmittedResponseTransferItem
PDUSessionResourcesAdmitted-Item                  N xnap.ies id-PDUSessionResourcesAdmitted-Item
PDUSessionResourcesAdmitted-List                  N xnap.ies id-PDUSessionResourcesAdmitted-List
PDUSessionResourcesNotAdmitted-Item               N xnap.ies id-PDUSessionResourcesNotAdmitted-Item
PDUSessionResourcesNotAdmitted-List               N xnap.ies id-PDUSessionResourcesNotAdmitted-List
PDUSessionResourcesToBeSetup-Item                 N xnap.ies id-PDUSessionResourcesToBeSetup-Item
QoSFlowAdmitted-Item                              N xnap.ies id-QoSFlowAdmitted-Item
QoSFlow-Item                                      N xnap.ies id-QoSFlow-Item
QoSFlowNotAdmitted-Item                           N xnap.ies id-QoSFlowNotAdmitted-Item
QoSFlowsToBeSetup-Item                            N xnap.ies id-QoSFlowsToBeSetup-Item
RANPagingArea                                     N xnap.ies id-RANPagingArea
RANPagingPriority                                 N xnap.ies id-RANPagingPriority
ResetRequestPartialReleaseItem                    N xnap.ies id-ResetRequestPartialReleaseItem
ResetRequestTypeInfo                              N xnap.ies id-ResetRequestTypeInfo
ResetResponsePartialReleaseItem                   N xnap.ies id-ResetResponsePartialReleaseItem
ResetResponseTypeInfo                             N xnap.ies id-ResetResponseTypeInfo
RespondingNodeTypeConfigUpdateAck                 N xnap.ies id-RespondingNodeTypeConfigUpdateAck
ServedCellsToActivate                             N xnap.ies id-ServedCellsToActivate
ServedCellsToUpdate-E-UTRA                        N xnap.ies id-servedCellsToUpdate-E-UTRA
#id-ServedCellsToUpdateInitiatingNodeChoice
ServedCellsToUpdate-NR                            N xnap.ies id-servedCellsToUpdate-NR
NG-RANnodeUEXnAPID                                N xnap.ies id-sourceNG-RANnodeUEXnAPID
TAISupport-Item                                   N xnap.ies id-TAISupport-Item
TAISupport-List                                   N xnap.ies id-TAISupport-list
Target2SourceNG-RANnodeTranspContainer            N xnap.ies id-Target2SourceNG-RANnodeTranspContainer
Target-CGI                                        N xnap.ies id-targetCellGlobalID
NG-RANnodeUEXnAPID                                N xnap.ies id-targetNG-RANnodeUEXnAPID
TraceActivation                                   N xnap.ies id-TraceActivation
UEContextID                                       N xnap.ies id-UEContextID
UEContextInfoHORequest                            N xnap.ies id-UEContextInfoHORequest
UEContextInfoRetrUECtxtResp                       N xnap.ies id-UEContextInfoRetrUECtxtResp
UEIdentityIndexValue                              N xnap.ies id-UEIdentityIndexValue
UERANPagingIdentity                               N xnap.ies id-UERANPagingIdentity
XnBenefitValue                                    N xnap.ies id-XnRemovalThreshold

#XNAP-PROTOCOL-EXTENSION

#XNAP-ELEMENTARY-PROCEDURE
HandoverRequest                         N xnap.proc.imsg id-handoverPreparation
HandoverRequestAcknowledge              N xnap.proc.sout id-handoverPreparation
HandoverPreparationFailure              N xnap.proc.uout id-handoverPreparation

SNStatusTransfer                        N xnap.proc.imsg id-sNStatusTransfer

HandoverCancel                          N xnap.proc.imsg id-handoverCancel

RetrieveUEContextRequest                N xnap.proc.imsg id-retrieveUEContext
RetrieveUEContextResponse               N xnap.proc.sout id-retrieveUEContext
RetrieveUEContextFailure                N xnap.proc.uout id-retrieveUEContext

RANPaging                               N xnap.proc.imsg id-rANPaging

DataForwardingAddressIndication         N xnap.proc.imsg id-dataForwardingAddressIndication

UEContextRelease                        N xnap.proc.imsg id-uEContextRelease

SNodeAdditionRequest                    N xnap.proc.imsg id-sNGRANnodeAdditionPreparation
SNodeAdditionRequestAcknowledge         N xnap.proc.sout id-sNGRANnodeAdditionPreparation
SNodeAdditionRequestReject              N xnap.proc.uout id-sNGRANnodeAdditionPreparation

SNodeReconfigurationComplete            N xnap.proc.imsg id-sNGRANnodeReconfigurationCompletion

SNodeModificationRequest                N xnap.proc.imsg id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationRequestAcknowledge     N xnap.proc.sout id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationRequestReject          N xnap.proc.uout id-mNGRANnodeinitiatedSNGRANnodeModificationPreparation

SNodeModificationRequired               N xnap.proc.imsg id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationConfirm                N xnap.proc.sout id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation
SNodeModificationRefuse                 N xnap.proc.uout id-sNGRANnodeinitiatedSNGRANnodeModificationPreparation

SNodeReleaseRequest                     N xnap.proc.imsg id-mNGRANnodeinitiatedSNGRANnodeRelease
SNodeReleaseRequestAcknowledge          N xnap.proc.sout id-mNGRANnodeinitiatedSNGRANnodeRelease
SNodeReleaseReject                      N xnap.proc.uout id-mNGRANnodeinitiatedSNGRANnodeRelease

SNodeReleaseRequired                    N xnap.proc.imsg id-sNGRANnodeinitiatedSNGRANnodeRelease
SNodeReleaseConfirm                     N xnap.proc.sout id-sNGRANnodeinitiatedSNGRANnodeRelease

SNodeCounterCheckRequest                N xnap.proc.imsg id-sNGRANnodeCounterCheck

SNodeChangeRequired                     N xnap.proc.imsg id-sNGRANnodeChange
SNodeChangeConfirm                      N xnap.proc.sout id-sNGRANnodeChange
SNodeChangeRefuse                       N xnap.proc.uout id-sNGRANnodeChange

RRCTransfer                             N xnap.proc.imsg id-rRCTransfer

XnRemovalRequest                        N xnap.proc.imsg id-xnRemoval
XnRemovalResponse                       N xnap.proc.sout id-xnRemoval
XnRemovalFailure                        N xnap.proc.uout id-xnRemoval

XnSetupRequest                          N xnap.proc.imsg id-xnSetup
XnSetupResponse                         N xnap.proc.sout id-xnSetup
XnSetupFailure                          N xnap.proc.uout id-xnSetup

NGRANNodeConfigurationUpdate            N xnap.proc.imsg id-nGRANnodeConfigurationUpdate
NGRANNodeConfigurationUpdateAcknowledge N xnap.proc.sout id-nGRANnodeConfigurationUpdate
NGRANNodeConfigurationUpdateFailure     N xnap.proc.uout id-nGRANnodeConfigurationUpdate

CellActivationRequest                   N xnap.proc.imsg id-cellActivation
CellActivationResponse                  N xnap.proc.sout id-cellActivation
CellActivationFailure                   N xnap.proc.uout id-cellActivation

ResetRequest                            N xnap.proc.imsg id-reset
ResetResponse                           N xnap.proc.sout id-reset

ErrorIndication                         N xnap.proc.imsg id-errorIndication

PrivateMessage                          N xnap.proc.imsg id-privateMessage
#.END
